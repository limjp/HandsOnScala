[
    "1 + 1 ",
    "\"i am a cow\".substring(2, 4)",
    "\"i am cow\".substing(2,3)",
    "/tmp",
    "pwd",
    "exit",
    "hello(12)",
    "exit",
    "5 + 2",
    "val t = (1, true, \"hello\")",
    "t._1",
    "t.2",
    "t._3",
    "t._2",
    "val t",
    "t",
    "t.getClass",
    "ab = Array(1,2,3)",
    "ab = Array[Int](1,2,3,4)",
    "val ab = Array(1,2,3)",
    "a(0)",
    "ab(0)",
    "ab(2)",
    "clear",
    "exit",
    "def hello(title: String, firstName: String, lastNameOpt: Optional[String]) = {\nlastNameOpt match {\ncase Some(lastName) => println(s\"Hello $title. $lastName\")\ncase None => println(s\"Hello $firstName\")\n}\n}",
    "def hello(title: String, firstName: String, lastNameOpt: Option\n[String]) = {\nlastNameOpt match {\ncase Some(lastName) => println(s\"Hello $title. $lastName\")\ncase None => println(s\"Hello $firstName\")\n}\n}",
    "hello(\"Mr\", \"Jun Ping\", \"Lim\")",
    "hello(\"Mr\", \"Jun Ping\", None)",
    "hello(\"Mr\", \"Jun Ping\", Some(\"Lim\"))",
    "Some(\"Lim\").getOrElse(\"<unknown>\")",
    "None.getOrElse(\"<unknown>\")",
    "val test = Array(1,2,3)",
    "test.map(() => 5)",
    "def (a: Option[String]) = a.map(() => 5)",
    "def aTest (a: Option[String]) = a.map(() => 5)",
    "def bTest (a: Option[Int]): String = a.map(() => \"5\")",
    "def bTest (a: Option[Int]): Int = a.map(() => \"5\")",
    "def hello2(name: Option[String]) = {\nfor (s <- name) println(s\"Hello $s\")\n}",
    "hello2(None)",
    "hello2(\"Jun Ping\")",
    "hello2(Some(\"Jun Ping\")\n)",
    "def nameLength(name: Option[String]) = {\nname.map(_.length).getOrElse(-1)\n}",
    "def nameLength(name: Option[String]) = {\nname.map(\"boo\").getOrElse(-1)\n}",
    "nameLength(Some(\"Haoyi\"))",
    "nameLength(None)",
    "def BamlTest(name: Option[String]) = {\nname.map(\"Hi\").getOrElse(\"No name\")\n}",
    "for (i <- Range(0,10)) println(i)",
    "for (i <- Range(1,101)) println(i)",
    "for (i <- Range(1,101)) {\nif (i % 3 == 0 & i % 5 == 0) println(\"FizzBuzz\")\nelse if (i % 3 == 0) println(\"Fizz\")\nelse if( i % 5 == 0) println(\"Buzz\")\nelse println(i)\n}",
    "exit",
    "val a = Array(1,2,3,4)",
    "a2 = for (i <- a) yield i * i",
    "val a2 = for (i <- a) yield i * i",
    "val a3 = for (i <- a) yield \"Hello \" + i",
    "val a4 = for (i <- a if i % 2 == 0) yield \"Hello \" + i",
    "val a = Array(1,2)",
    "val b = Array(\"Hello\", \"World\"))",
    "val b = Array(\"Hello\", \"World\")",
    "val flattened = for (i <- a; s <- b) yield s + i",
    "var g: Int => Int = i => i + 1",
    "g(1)",
    "g(10)",
    "g = i => i * 2",
    "g(10)",
    "Exit",
    "exit",
    "class Box(var x: Int) {\ndef update(f: Int => Int) = x = f(x)\ndef printMsg(msg: String) = {\nprintln(msg + x)\n}\n}",
    "val b = new Box(1)",
    "b.printMsg",
    "b.printMsg(\"Hello\")",
    "b.update(i => i + 5)",
    "b.printMsg(\"Hello\")",
    "b.update(_ + 5)",
    "b.printMsg(\"Hello\")",
    "def increment(i: Int) = i + 1",
    "val b = new Box(123)",
    "b.update(increment)",
    "b.update(x => increment(x))",
    "b.update{x => increment(x)}",
    "b.update(increment(_))",
    "b.printMsg(\"Result: \")",
    "exit",
    "class Foo(x: Int) {\ndef printMsg(msg: String) = {\nprintln(msg + x)\n}\n}",
    "val f = new Foo(1)",
    "f.printMsg(\"Hello\")",
    "f.x",
    "f.x",
    "println(f.x)",
    "class Bar(val x: Int) {\ndef printMsg(msg: String) = {\nprintln(msg + x)\n}\n}",
    "val b = new Bar(1)",
    "b.x",
    "trait Point {\ndef hypotenuse: Double \n}",
    "class Point2D(x: Double, y: Double) extends Point {\ndef hypotenuse = math.sqrt(x * x + y * y)\n}",
    "class Point3D(x: Double, y: Double, z: Double) extends Point {\ndef hypotenuse = math.sqrt(x * x + y * y + z * z)\n}",
    "val points: Array[Points] = Array(new Point2D(1,2), new Point3D(4,5,6))",
    "val points: Array[Point] = Array(new Point2D(1,2), new Point3D(4,5,6))",
    "for (p <- points) println(p.hypotenuse)",
    "exit",
    "val a: Option[Int] = Some(1)",
    "a.get",
    "val b: Array[Int] = new Array(3)",
    "b(1) = 5",
    "println(b)",
    "println(b.getString)",
    "print(b.mkString)",
    "println(b.type)",
    "println(b.getClass)",
    "println(b.mkString)",
    "b(1)",
    "b(0)",
    "b(2)",
    "b(3)",
    "exit",
    "val a = 5 * \" \"",
    "val a = 5",
    "String.format(\"%\" + a + \"s\", \"\")",
    "exit",
    "val a = 5",
    "String.format(\"%\" + a + \"s\", \"\")",
    "exit",
    "val a = 5",
    "val b = String.format(\"%\" + a + \"s\", \"\")",
    "println(b)",
    "println(b + \"Hi\")",
    "println(b + \"Hi\")",
    "exit",
    "for (a <- 0) {\nprintln(a)\n}",
    "for (i <- Range(0,0))\n{ println(i)\n}",
    "exit"
]